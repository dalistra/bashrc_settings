vimtutor

sudo su to login as root or specify user with     su user
sudo  gain root privilege at /etc/sudoers or with sudo group
visudo to modify /etc/sudoers file

/usr/share/man/man8   man pages for admin commands

/usr/local/bin or /usr/local/sbin     for user specific commands. the PATH will add these automatically??

journalctl    monitor system and service messages 
dmesg
lspci lsusb lscpu   maybe with -v -vv -vvv etc.
lsmod   show loaded modules (hardware driver??)

rsyslogd and syslogd

MOD INSTALL
# modprobe MODULE to load module    -a if you want to install multiple, or dependencies
# lsmod | grep MODULE to see if it is loaded
MOD UNINSTALL
# modprobe -r MODULE        OR rmmod MODULE only a single module here
# lsmod | grep MODULE

PACKAGES:
sudo apt update
sudo apt install PACKAGE
sudo apt remove PACKAGE
sudo apt purge PACKAGE
sudo apt upgrade
apt search sensor
apt search sensor | grep -B 2 -A 2 degree    shows all packages with sensor and degree and the 2 lines before and after the entry
apt show PACKAGE    shows info about package
apt depends PACKAGE   shows package dependencies

Package Sources are in /etc/apt/sources.list
sudo apt-add-repository REPOSITORY LINK

USERS:
adduser and deluser (interactive) or useradd and userdel (noninteractive)
default Values for new users are in /etc/login.defs and /etc/adduser.conf
user accountinfo and password are stored in /etc/passwd and /etc/shadow
the dir /etc/skel is copied to each new home dir

usermod   to modify an user

GROUPS:
newgrp GROUPNAME   to change my primary group, maybe exit to get my old grp back?
addgroup GROUPNAME   to add a new group
groupmod -n apple pear    will modify a group in this case the name

File Permission with ACL (Access Control List)
check if acl is enabled: mount | grep sda   or sdb sdc etc.
sudo tune2fs -l /dev/sd*2 | grep mount    use the detected letter from command above and the correct number for the right partition
sudo tune2fs -o acl /dev/sd*NUMBER    to add the acl option to the filesystem. to work you have to remount the filesystem

setfacl -m u:username:rwx filename      -m to modify    -x to remove permissions      d:  right before the u: or g: to set as default, which will inherit the permission to subfolder/files
?? d: must be set for directories ??
setfacl -m g:groupname:rw filename
getfacl filename    the mask parameter is set as the standard chmod group permission and
                    sets the maximum permission a user or group can have through ACL permissions

chgrp groupname directorypath   to assign a group to a dir
chmod 2775 dirpath    to set the group as SET so every subfolder/file will inherit the group  4 is set UID  2 is set GUI  1 is sticky bit

centralizing user account database with LDAP (opensource) NIS old or Winbind (Active Directory)

FILESYSTEM AND PARTITIONS:

journalctl -f     to watch the log file, where you can see new usb sticks and so on..
/etc/fstab    file which contains information about partitions devices and mount points

parted -l /dev/sd*    command will list info about disk and partitions
fdisk -l /dev/sd*     command will list info about disk and partitions
lsblk                 command will list info about disk and partitions

mount | grep sd*      to check the mount points of a specific disk

PARTED:
parted /dev/sd*       to enter partition application for sd*
(parted) p            list the partitions
(parted) rm           remove partitions
(parted) mklabel gpt      relabel the partition table to gpt
(parted) mkpart       create an partition with a name a file system and a start and end point on the disk
(parted) p            list the partitions and check again if the process was done correctly
(parted) quit         quit to quit parted

mkfs -t xfs /dev/sd*NUMBER    create a filesystem on the partition  there are other possible commands such as mkfs.ext4

mkdir /mnt/test           create dir
mount /dev/sd*NUMBER /mnt/test    mount the disk to /mnt/test
df -h /mnt/test           show info about the mountpoint

umount /dev/sd*NUMBER     to unmount the disk

/etc/fstab    is a file which holds mountpoints and will mount them automatically at the system boot
you can add for example /dev/sdb1 /mnt/test xfs defaults 0 1      to the file to mount sdb1 at system start
        xfs is the filesystem and defaults are the options used first 0 is for backup  dump command and second 1 will check the disk health after #Mounts

FDISK APP FOR PARTITIONING

dd if=/dev/zero of=/dev/sdLETTER bs=1M count=100     this command will fill the device file for the disk with zeros to delete the configuration

fdisk /dev/sdLETTER       this will start the programm for sdLETTER
n       new partition     part.num.     firstsector       lastsector can be written as +5G for 5 Gigabyte or +500M etc.
there are possible 4 primary partitions, one or more of these can be extended partitions (container for logical partitions)
in a extended partition it is possible to create more than the standard 4 limit like 1,2,3 prim 4 extended 5,6,7,8,... logical partitions which are inside part 4 


p     will show the partition list
t     will change the partition type of a partition     c for FAT32     8e for Linux LVM
l     will list all partition types
w     to write the partitions in the partition table. until now fdisk didnt change anything

# grep sdb /proc/partitions       check if the new partitions are here... if not do the next command and check again
8 16 120127488 sdb
8 17 120125440 sdb1
# partprobe /dev/sdb              command if the list isnt correct in the last command
# grep sdb /proc/partitions       check again
8 16 120127488 sdb
8 17 5242880 sdb1
8 18 5242880 sdb2
8 19 3145728 sdb3
8 20 1 sdb4
8 21 3145728 sdb5
8 22 4194304 sdb6

PARTITIONS TO FILESYSTEMS OR SWAP AREAS....
# mkfs -t ext4 /dev/sdb1        ext4 filesystem
# mkswap /dev/sdb2              swap area
# mkfs /dev/sdb3                ext2 default option
# mkfs -t vfat /dev/sdb5        vfat filesystem
# pvcreate /dev/sdb6            LVM physical volume


CHECKING FOR LVM

# fdisk -l /dev/sda | grep /dev/sda       check for Linux LVM partitions
# pvdisplay /dev/sda2                     show info for physical volume
# vgdisplay vg_abc                        show info for volume group
# lvdisplay vg_abc                        show info for logical volumes

hirachy for LVM is Physical volume ---> volume group ---> logical volumes

??? #pvcreate                       maybe use this first to create a physicalvolume for LVM use ????
# vgcreate myvg0 /dev/sdc6          create a volume group
# vgdisplay myvg0                   show volume group
# lvcreate -n music -L 1G myvg0     create logical volume music with 1G space in myvg0
# ls /dev/mapper/myvg0*             list the lv for myvg0

# mkfs -t ext4 /dev/mapper/myvg0-music        format the lv
# mkdir /mnt/mymusic                           make a folder to mount the volume
# mount /dev/mapper/myvg0-music /mnt/mymusic    mount the volume
# df -h /mnt/mymusic                          shows the free space in the lv

to mount in /etc/fstab you could use /dev/mapper/myvg0-music /mnt/mymusic ext4 defaults 1 2 for example

growing LVM volumes:
# vgdisplay myvg0         info about the vg
# df -h /mnt/mymusic/     info about the vg

# lvextend -L +1G /dev/mapper/myvg0-music       extend the lv myvg0-music by 1G
# resize2fs -p /dev/mapper/myvg0-music          resice the filesystem to fit ne lv size

# df -h /mnt/mymusic/     info about the vg      check the new size

FILESYSTEMS
man fs

SWAP Memory
# free -m       show memory stats
# dd if=/dev/zero of=/var/tmp/myswap bs=1M count=1024     create a file for later swap use
# mkswap /var/opt/myswap                make a swap file 
# swapon /var/opt/myswap                activate the swap file
# free -m                     stats

FSTAB FOR PERMANENT SWAP USE AND MOUNT
/etc/fstab
/var/opt/myswap swap swap defaults 0 0
# swapon -a       to activate it directly?? not only after reboot

# swapoff /var/opt/myswap       disable swap check with free -m if swap is empty

Seite 258

blkid     to see all the UUIDs from the disk devices    they can be used to mount a EINDEUTIGES disk instead of using sd*#

/etc/fstab  example

/dev/sdc1                     /windowsdisk    vfat    ro                1 2                                   ro for read olny???
192.168.0.94:/nfsdisk         /remotedisk     nfs     users,_netdev     0 0                                   _netdev   will wait for network to start before mount
//192.168.0.95/myNASshare     /NASshare       cifs    guest,_netdev     0 0                                   users and guests will allow them to mount the disks

mount     to see mounted disks/partitions
mount example
# mkdir /mnt/temp
# mount -t ext2 -o ro /dev/sdc1 /mnt/temp     -o for options this example read only
remount:
# mount -t ext2 -o remount,rw /dev/sdc1       read write remount

mount ISO:
# mkdir /mnt/isoimage
# mount -o loop isofile123.iso /mnt/isoimage

A # umount /mnt/test            -l lazy     can be used if the drive is busy and the unmount should happen when the disk isnt busy anymore
B # umount /dev/sdb1            -f force    can be used to force the unmount
itâ€™s better to use the directory name (/mnt/test), because the other option fails if the device is mounted in several points

lsof /mnt/test      can be used to see which process holds the drive busy 
fuser -v /mnt/test      same result as above



